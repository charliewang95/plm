var mongoose = require('mongoose'),
    User = require('mongoose').model('User'),
    Ingredient = require('mongoose').model('Ingredient'),
    Vendor = require('mongoose').model('Vendor'),
    VendorPrice = require('mongoose').model('VendorPrice'),
	Schema = mongoose.Schema;

var IngredientLotUsedInOrderSchema = new Schema({
    lotNumber: {
        type: String,
        required: true
    },
    package: {
        type: Number,
        required: true
    }
});
mongoose.model('IngredientLotUsedInOrder', IngredientLotUsedInOrderSchema);

var OrderSchema = new Schema({
	userId: {
		type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
	},
	ingredientId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Ingredient',
        required: true
    },
	ingredientName: {
        type: String,
        required: true
    },
    vendorName: {
        type: String,
        required: true
    },
    packageNum: {
        type: Number,
        required: true
    },
    price: {
        type: Number,
        required: true,
    },
    space: { //auto generated by server
        type: Number,
        required: true
    },
    numUnit: { //auto generated by server
        type: Number,
        required: true
    },
    totalPrice: { //auto generated by server
        type: Number,
        required: true
    },
    isPending: {
        type: Boolean,
//        required: true,
        default: false
    },
    tag: {
        type: String,
        default: "abc"
    },
    ingredientLots: [IngredientLotUsedInOrderSchema]
});

OrderSchema.index({ userId: 1, ingredientName: 1, vendorName: 1, tag: 1}, { unique: true });

OrderSchema.statics.getNumSpaceAndNumUnits = function(ingredientName, package, res, next, callback) {
    Ingredient.findOne({nameUnique:ingredientName.toLowerCase()}, function(err, ingredient) {
        if (err) {
            next(err);
        }
        else if (!ingredient) {
            res.status(400);
            res.send("Ingredient doesn't exist");
        }
        else {
            Ingredient.getPackageSpace(ingredient.packageName, function(space) {
                if (space == -1) {
                    res.status(400);
                    res.send("Package name doesn't exist");
                }
                else {
                    unitNumPerPackage = ingredient.numUnitPerPackage;
                    callback(err, space*package, unitNumPerPackage*package);
                }
            });
        }
    });
}

//OrderSchema.methods.getNumUnits = function(ingredientId, package, res, next) {
//    Ingredient.findById(ingredientId, function)
//}

mongoose.model('Order', OrderSchema);
